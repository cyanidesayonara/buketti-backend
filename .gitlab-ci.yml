stages:
  - cache
  - build
  - test
  - build image
  - deploy staging

cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
  policy: pull

update cache:
  stage: cache
  image: node:16-alpine
  cache:
    <<: *global_cache
    policy: push
  only:
    - schedules
  script:
    - npm install

build:
  stage: build
  image: node:16-alpine
  except:
    - schedules
  before_script:
    - node -v
    - npm -v
  script:
    - npm install

test build:
  stage: test
  image: node:16-alpine
  except:
    - schedules
  before_script:
    - node -v
    - npm -v
    - npm install
    - apk add --no-cache curl
  script:
    #- npm run lint
    #- npm run test
    - npm run dev &
    - timeout 60 sh -c -- 'until curl -LIs http://localhost:8000 |grep -q "200 OK" && echo "Server responded 200 OK" ; do sleep 1 ; done'

.define tag: &define_tag |
    # Defining the tag for the image (which will be the version name to deploy)...
    # Parse JIRA ticket ID from the commit branch name in branch pipelines (including the default branch)
    if [[ ${CI_COMMIT_BRANCH-} ]]; then TAG=$(echo $CI_COMMIT_BRANCH | grep -o -E "BUK-[0-9]+" | head -n 1); fi
    # Parse JIRA ticket ID from the merge request title in merge request pipelines
    if [[ ${CI_MERGE_REQUEST_TITLE-} ]]; then TAG=$(echo $CI_MERGE_REQUEST_TITLE | grep -o -E "BUK-[0-9]+" | head -n 1); fi
    # Use the tag in tag pipelines
    if [[ ${CI_COMMIT_TAG-} ]]; then TAG=${CI_COMMIT_TAG}; fi
    # Print the tag
    echo "Tag: ${TAG}"

build and push image:
  stage: build image
  cache: {}
  except:
    - schedules
  before_script:
    - docker -v
    - *define_tag
  script:
    - docker build -t ${CI_PROJECT_TITLE}:${CI_COMMIT_SHORT_SHA} .
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    - docker image tag ${CI_PROJECT_TITLE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_TITLE}:${CI_COMMIT_SHORT_SHA}
    - docker image tag ${CI_PROJECT_TITLE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_TITLE}:${TAG}
    - docker image push ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_TITLE}:${CI_COMMIT_SHORT_SHA}
    - docker image push ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_TITLE}:${TAG}
  after_script:
    - docker logout ${CI_REGISTRY}

deploy staging:
  stage: deploy staging
  image: alpine:3.16
  cache: {}
  except:
    - schedules
  before_script:
    - *define_tag
    - # Install OpenSSH client if it isn't installed yet
      ! command -v ssh >/dev/null 2>&1 && apk add --no-cache openssh-client
    - eval "$(ssh-agent)"
    - echo ${STAGING_PRIVATE_KEY_BASE64} | base64 -d | ssh-add - > /dev/null
    - ssh -o StrictHostKeyChecking=no ${STAGING_USER}@${STAGING_SERVER} "echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}"
  script:
    - ssh -o StrictHostKeyChecking=no ${STAGING_USER}@${STAGING_SERVER} "docker compose -f /opt/${CI_PROJECT_TITLE}/docker-compose-${TAG}.yml up --pull always -d"
